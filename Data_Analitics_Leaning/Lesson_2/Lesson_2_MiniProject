#!/usr/bin/env python
# coding: utf-8

# In[2]:


import pandas as pd


# In[3]:


bookings = pd.read_csv("~/shared/homeworks/python_ds_miniprojects/2/bookings.csv", sep =';')


# In[4]:


# Task - write the first 7 lines of the dataset into the bookings_head variable.

bookings_head = bookings.head(7)


# In[5]:


# Task - Look at the size of the table. How many columns are there in total?

bookings.shape
# Answer - 21


# In[6]:


# task - What type do most variables belong to? 

bookings.dtypes
# int64 == object == 10


# In[7]:


# Task - replace words with capital letters and spaces

# makes function that replace ' ' with '_' and replace words with capital letters with same words without capital letters
# function parameter is any string, function make replacement if it required 
# and return string without spaces and capital letters

def del_space_and_capitals (string_with_space_and_capitals):
    string_without_spaces = string_with_space_and_capitals.replace(' ', "_")
    string_without_spaces_and_capitals = str.lower(string_without_spaces)
    return string_without_spaces_and_capitals

# renames all columns to names without spaces and capitals

bookings = bookings.rename(columns=del_space_and_capitals)


# In[8]:


# Task - Which countries have had the highest number of successful bookings?
# A booking is considered successful if it has not been subsequently cancelled (variable is_canceled). 
# Select the top 5 countries as your answer.

# choose successfull bookings only and count how many times each country is
bookings.query('is_canceled == 0')['country'].value_counts()

# Answer:
# PRT    21071
# GBR     9676
# FRA     8481
# ESP     6391
# DEU     6069


# In[9]:


# How many nights (stays_total_nights) do hotels like City Hotel book on average?
# Resort Hotel? Write the resulting values in the blanks to 2 digits after the dot.

# make new dataframe with "Resort Hotel" only
# calculate mean in 'stays_total_nights' column
# round resulting values to 2 digits after the dot.

(bookings.query("hotel == 'Resort Hotel'")
 ['stays_total_nights'].mean()
 .round(2))
# Answer: 4.32


# In[10]:


# make the same with "City Hotel"

bookings.query("hotel == 'City Hotel'")['stays_total_nights'].mean().round(2)
# Answer: 2.98


# In[ ]:





# In[11]:


# Sometimes the room type assigned to a customer (assigned_room_type) differs from 
# the one originally reserved (reserved_room_type). This can happen, for example, because of overbooking.
# How many such observations have we encountered in the dataset?
# *Cancellation of a reservation also counts

# choose all observations with changed room type and watch their count
bookings.query("reserved_room_type != assigned_room_type").shape
#answer - 14917


# In[12]:


# Now analyse the dates of planned arrival (arrival_date_year).
# For which month were most booked in 2016? Has the most popular month changed in 2017?

# choose observatons for 2016 year only, then count number booking for each month
bookings.query("arrival_date_year == 2016")['arrival_date_month'].value_counts()
# October was the most popular month in 2016 year


# In[13]:


# choose observatons for 2017 year only, then count number booking for each month
bookings.query("arrival_date_year == 2017")['arrival_date_month'].value_counts()
# May was the most popular month in 2017 year, but observations was ended at september 2017
# highly unlikely, but September and later months could be the most popular in 2017


# In[14]:


# Group the data by year and then check for which month (arrival_date_month) 
# were the City Hotel bookings cancelled most often in 2015? 2016? 2017? 

# Choose cancelled observations for City Hotel in 2015, and then count number of observations for each months
bookings.query("is_canceled == 1 and arrival_date_year == 2015 and hotel == 'City Hotel'")['arrival_date_month'].value_counts()


# In[15]:


# repeat actions for 2016 year
bookings.query("is_canceled == 1 and arrival_date_year == 2016 and hotel == 'City Hotel'")['arrival_date_month'].value_counts()


# In[16]:


# repeat actions for 2017 year
bookings.query("is_canceled == 1 and arrival_date_year == 2017 and hotel == 'City Hotel'")['arrival_date_month'].value_counts()

# Answer - for 2015 year - September; for 2016 - October; for 2017 - May


# In[18]:


# Look at the numerical characteristics of the three columns:
# adults, children and babies. Which one has the highest average value?

print('average number of adults is ', bookings['adults'].mean().round(2))
print('average number of children is ', bookings['children'].mean().round(2))
print('average number of babies is ', bookings['babies'].mean().round(2))
# answer - adults


# In[19]:


# Create a total_kids column by combining the children and babies columns.
# For which hotel type was the average value of the variable the highest?
# City hotel - the hotel is in a city
# Resort hotel - resort hotel
# Answer with the highest average total_kids, rounded to 2 decimal places.

# create 'total_kids' column by  summing up
bookings['total_kids'] = bookings['children'] + bookings['babies']

# group dataframe by hotel type
# calculate average number of juveniles for each type of hotels
# round calculated valueÑ‹
(bookings.groupby(['hotel'], as_index = False)
 .aggregate({'total_kids' : 'mean'})
 .round(2))
# Answer - 0.14


# In[39]:


# Not all bookings have completed successfully (is_canceled),
# so you can count how many customers were lost in the process.
# In other words, calculate a metric called Churn Rate.
# Churn rate is the percentage of subscribers (e.g. to push notifications from the site) 
# who unsubscribed from the communication channel,
# abandoned the service for a certain period of time. In other words, 
# it is a ratio of the number of users who left the channel to the total number of users, expressed as a percentage.
# In our case Churn Rate is a percentage of clients who cancelled a booking.
# Let's see how this metric relates to customers having children!
# Create a variable has_kids that takes True if the client specified at least one child (total_kids)
# when booking, otherwise it takes False. Next check which user group has the highest churn rate. 
# Answer with the highest churn rate rounded to 2 decimal places
# (i.e. a fraction of 0.24563 is 24.56% and the answer is 24.56).

# make kolumn "has_kids" use previous created 'total_kids' column
bookings['has_kids'] = bookings['total_kids'] > 0

# take all bookings without kids
# and count all cases with and without cancelling
(bookings.query("has_kids == False")
 ["is_canceled"].value_counts())

# 0 = 69093 (didn't cancel); 1 = 40965 (cancel)

churn_rate_without_kids = 40965/(69093+40965)*100
print(churn_rate_without_kids)
# 37.22%


# In[40]:


# the same: take all bookings WITH kids and count all cases with and without cancelling
bookings.query("has_kids == True")["is_canceled"].value_counts()

# 0 = 6073 (didn't cancel); 1 = 3259 (cancel)

churn_rate_with_kids = 3259/(3259+6073)*100
print(churn_rate_with_kids)
# 34.92%
# So answer is 37.22
