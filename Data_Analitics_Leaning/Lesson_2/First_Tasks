#!/usr/bin/env python
# coding: utf-8

# In[104]:


import pandas as pd


taxi = pd.read_csv('~/DataSets/2_taxi_nyc.csv')



# how many lines and rows in the dataset
taxi.shape


# task about types of data in fataframe
taxi.dtypes



# rename columns with space in their names
taxi = taxi.rename(columns = {'pcp 01':'pcp_01', 'pcp 06':'pcp_06', 'pcp 24':'pcp_24'})


# taxi.query("borough == 'Manhattan'") make new dataframe with borough = manhattan only
# .shape return number of rows and columns, [0] make return only number of columns
taxi.query("borough == 'Manhattan'").shape[0]


# count how many times each borough is in dataframe
taxi['borough'].value_counts()


# how many pickups at all
taxi.pickups.sum()


# sort table at borough
# aggregate all pickups inside borough
# sort borough at pickups

(taxi.groupby('borough').
 aggregate({'pickups':'sum'}).
 sort_values('pickups', ascending = False))


# task - min_pickups should contain name of borough with the least counts of pickups
# idxmin return minimal index
# we have dict with one cell 'pickups':'EWR', so we us [0] for make ordinary string variable 

min_pickups = (taxi.groupby('borough').
               aggregate({'pickups':'sum'}).
               idxmin())[0]

#task - find boroughs in which pickups at holidays more than at weekday
(taxi.groupby(['borough', 'hday']).
 aggregate({'pickups':'mean'}))
#So it is EWR and Queens


#task - For each area, calculate the number of trips by month.
#Sort the resulting values in descending order and save the resulting dataframe to pickups_by_mon_bor.

pickups_by_mon_bor = (taxi.groupby(['borough', 'pickup_month'], as_index = False).
                     aggregate({'pickups':'sum'}).
                     sort_values('pickups', ascending = False))


# Task - Write a function temp_to_celcius that takes a column temperature in °F as input
# and returns the values converted to degrees Celsius

def temp_to_celcius (temp_in_Farenheits):
    temp_in_Celсius = ((temp_in_Farenheits - 32)*5.0)/9.0
    return temp_in_Celсius
